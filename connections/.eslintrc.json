{
  "root": true,
  "ignorePatterns": ["!**/*"],
  "plugins": ["prettier", "import"],
  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [".ts"]
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,
        "project": "tsconfig.json"
      }
    }
  },
  "overrides": [
    {
      "files": ["*.ts"],
      "env": {
        "jest": true
      },
      "parserOptions": {
        "project": ["./tsconfig.app.json", "./tsconfig.spec.json", "./tsconfig.linter.json"],
        "emitDecoratorMetadata": true
      },
      "extends": [
        "prettier",
        "eslint:recommended",
        "plugin:import/recommended",
        "plugin:import/typescript",
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates",
        "plugin:@typescript-eslint/strict",
        "plugin:@typescript-eslint/recommended-requiring-type-checking"
      ],
      "rules": {
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "cn",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "cn",
            "style": "kebab-case"
          }
        ],
        "@typescript-eslint/naming-convention": [
          2,
          {
            "selector": "default",
            "format": ["strictCamelCase"],
            "leadingUnderscore": "forbid",
            "trailingUnderscore": "forbid"
          },
          {
            "selector": "variable",
            "format": ["strictCamelCase", "UPPER_CASE"],
            "modifiers": ["const"],
            "leadingUnderscore": "forbid",
            "trailingUnderscore": "forbid"
          },
          {
            "selector": "variable",
            "format": ["strictCamelCase", "UPPER_CASE"],
            "modifiers": ["const"],
            "types": ["boolean", "string", "number"],
            "leadingUnderscore": "forbid",
            "trailingUnderscore": "forbid"
          },
          {
            "selector": ["variable", "property"],
            "types": ["boolean"],
            "format": ["PascalCase"],
            "prefix": ["is", "has", "should", "can", "will"],
            "leadingUnderscore": "forbid",
            "trailingUnderscore": "forbid"
          },
          {
            "selector": "variable",
            "modifiers": ["destructured"],
            "format": null
          },
          {
            "selector": "objectLiteralProperty",
            "format": null,
            "leadingUnderscore": "forbid",
            "trailingUnderscore": "forbid"
          },
          {
            "selector": "parameter",
            "format": ["strictCamelCase"],
            "leadingUnderscore": "allow",
            "trailingUnderscore": "forbid"
          },
          {
            "selector": ["typeLike", "enum"],
            "format": ["PascalCase"],
            "leadingUnderscore": "forbid",
            "trailingUnderscore": "forbid"
          },
          {
            "selector": "enumMember",
            "format": ["UPPER_CASE"],
            "leadingUnderscore": "forbid",
            "trailingUnderscore": "forbid"
          }
        ],
        "no-shadow": 0,
        "no-return-await": 0,
        "no-use-before-define": 0,
        "no-unused-expressions": 0,
        "padding-line-between-statements": 0,
        "prettier/prettier": 2,
        "radix": 2,
        "curly": 2,
        "eqeqeq": [2, "smart"],
        "default-case": 2,
        "default-case-last": 2,
        "object-shorthand": 2,
        "require-atomic-updates": 2,
        "complexity": [2, 10],
        "max-depth": [2, 4],
        "max-statements": [2, 20],
        "max-params": [2, 5],
        "max-nested-callbacks": [2, 4],
        "max-lines-per-function": [
          2,
          {
            "max": 100,
            "skipBlankLines": true,
            "skipComments": true
          }
        ],
        "id-match": 2,
        "id-denylist": 2,
        "no-void": [
          "error",
          {
            "allowAsStatement": true
          }
        ],
        "no-eval": 2,
        "no-alert": 2,
        "no-proto": 2,
        "no-labels": 2,
        "no-plusplus": 2,
        "no-lonely-if": 2,
        "no-multi-str": 2,
        "no-extra-bind": 2,
        "no-new-object": 2,
        "no-lone-blocks": 2,
        "no-self-compare": 2,
        "no-useless-call": 2,
        "no-multi-assign": 2,
        "no-new-wrappers": 2,
        "no-octal-escape": 2,
        "no-extend-native": 2,
        "no-nested-ternary": 2,
        "no-param-reassign": 2,
        "no-unreachable-loop": 2,
        "no-negated-condition": 2,
        "no-implicit-coercion": 2,
        "no-constructor-return": 2,
        "newline-per-chained-call": 0,
        "no-promise-executor-return": 2,
        "no-unmodified-loop-condition": 2,
        "no-constant-binary-expression": 2,
        "prefer-template": 2,
        "prefer-object-spread": 2,
        "prefer-object-has-own": 2,
        "prefer-numeric-literals": 2,
        "prefer-exponentiation-operator": 2,
        "no-return-assign": [2, "always"],
        "no-console": [
          1,
          {
            "allow": ["warn", "error", "debug"]
          }
        ],
        "no-sequences": [
          2,
          {
            "allowInParentheses": false
          }
        ],
        "no-else-return": [
          2,
          {
            "allowElseIf": false
          }
        ],
        "no-unneeded-ternary": [
          2,
          {
            "defaultAssignment": false
          }
        ],
        "no-restricted-syntax": [
          2,
          {
            "selector": "ForInStatement",
            "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys, values, entries}, and iterate over the resulting array."
          },
          {
            "selector": "ForOfStatement",
            "message": "for..of loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys, values, entries}, and iterate over the resulting array."
          },
          {
            "selector": "LabeledStatement",
            "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
          },
          {
            "selector": "WithStatement",
            "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
          }
        ],
        "prefer-destructuring": [
          2,
          {
            "array": false,
            "object": true
          },
          {
            "enforceForRenamedProperties": false
          }
        ],
        "import/named": 0,
        "import/default": 0,
        "import/namespace": 0,
        "import/prefer-default-export": 0,
        "import/no-named-as-default-member": 0,
        "import/no-cycle": 2,
        "import/no-namespace": 0,
        "import/no-unresolved": 2,
        "import/no-empty-named-blocks": 2,
        "import/no-useless-path-segments": [
          2,
          {
            "noUselessIndex": true
          }
        ],
        "import/no-duplicates": [
          2,
          {
            "prefer-inline": true,
            "considerQueryString": true
          }
        ],
        "import/no-extraneous-dependencies": [
          2,
          {
            "devDependencies": true
          }
        ],
        "@typescript-eslint/no-explicit-any": 2,
        "@typescript-eslint/triple-slash-reference": [
          2,
          {
            "lib": "never",
            "path": "never",
            "types": "never"
          }
        ],
        "@typescript-eslint/prefer-includes": 2,
        "@typescript-eslint/no-non-null-assertion": 0,
        "@typescript-eslint/dot-notation": [2, { "allowIndexSignaturePropertyAccess": true }],
        "@typescript-eslint/no-throw-literal": 2,
        "@typescript-eslint/no-base-to-string": 2,
        "@typescript-eslint/no-dynamic-delete": 2,
        "@typescript-eslint/unified-signatures": 2,
        "@typescript-eslint/ban-tslint-comment": 2,
        "@typescript-eslint/no-invalid-void-type": 2,
        "@typescript-eslint/prefer-function-type": 2,
        "@typescript-eslint/prefer-optional-chain": 2,
        "@typescript-eslint/prefer-ts-expect-error": 2,
        "@typescript-eslint/no-unnecessary-condition": 0,
        "@typescript-eslint/consistent-type-definitions": 2,
        "@typescript-eslint/prefer-reduce-type-parameter": 2,
        "@typescript-eslint/consistent-indexed-object-style": 2,
        "@typescript-eslint/consistent-generic-constructors": 2,
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": 2,
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "explicit",
            "overrides": {
              "accessors": "explicit",
              "constructors": "off",
              "methods": "explicit",
              "parameterProperties": "explicit",
              "properties": "explicit"
            }
          }
        ],
        "@typescript-eslint/array-type": [
          2,
          {
            "default": "array-simple"
          }
        ],
        "@typescript-eslint/consistent-type-assertions": [
          2,
          {
            "assertionStyle": "as",
            "objectLiteralTypeAssertions": "never"
          }
        ],
        "@typescript-eslint/prefer-nullish-coalescing": 0,
        "@typescript-eslint/restrict-plus-operands": [
          2,
          {
            "checkCompoundAssignments": true
          }
        ],
        "@typescript-eslint/no-redeclare": 2,
        "@typescript-eslint/method-signature-style": 2,
        "@typescript-eslint/switch-exhaustiveness-check": 2,
        "@typescript-eslint/no-confusing-void-expression": 2,
        "@typescript-eslint/no-redundant-type-constituents": 2,
        "@typescript-eslint/explicit-module-boundary-types": 2,
        "@typescript-eslint/consistent-type-imports": 2,
        "@typescript-eslint/consistent-type-exports": [
          2,
          {
            "fixMixedExportsWithInlineTypeSpecifier": true
          }
        ],
        "@typescript-eslint/strict-boolean-expressions": 0,
        "@typescript-eslint/require-array-sort-compare": [
          2,
          {
            "ignoreStringArrays": true
          }
        ],
        "@typescript-eslint/explicit-function-return-type": [
          2,
          {
            "allowExpressions": true
          }
        ],
        "@typescript-eslint/no-shadow": [
          2,
          {
            "hoist": "all",
            "allow": ["resolve", "reject", "done", "next", "err", "error"],
            "ignoreTypeValueShadow": true,
            "ignoreFunctionTypeParameterNameValueShadow": true
          }
        ],
        "@typescript-eslint/return-await": [2, "in-try-catch"],
        "@typescript-eslint/no-use-before-define": [
          2,
          {
            "ignoreTypeReferences": true
          }
        ],
        "@typescript-eslint/no-unused-expressions": [
          2,
          {
            "allowShortCircuit": true,
            "allowTernary": true,
            "allowTaggedTemplates": true,
            "enforceForJSX": true
          }
        ],
        "@typescript-eslint/padding-line-between-statements": [
          2,
          {
            "blankLine": "always",
            "prev": ["case", "default", "block", "block-like", "multiline-block-like", "interface", "type", "export"],
            "next": "*"
          },
          {
            "blankLine": "any",
            "prev": ["const", "let"],
            "next": ["const", "let"]
          },
          {
            "blankLine": "always",
            "prev": "*",
            "next": ["switch", "while", "try", "return", "if", "interface", "type", "function"]
          }
        ],
        "@typescript-eslint/no-duplicate-imports": 2,
        "@typescript-eslint/no-extraneous-class": 0,
        "@typescript-eslint/unbound-method": [
          "error",
          {
            "ignoreStatic": true
          }
        ]
      }
    },
    {
      "files": ["*.html"],
      "extends": ["plugin:@angular-eslint/template/recommended"],
      "plugins": ["@angular-eslint/template"],
      "rules": {
        "@angular-eslint/template/no-duplicate-attributes": ["error"],
        "@angular-eslint/template/eqeqeq": ["error"],
        "@angular-eslint/template/no-negated-async": ["error"],
        "@angular-eslint/template/use-track-by-function": ["error"],
        "@angular-eslint/template/attributes-order": ["error"]
      }
    }
  ]
}
